
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import java.text.ParseException;

import java.util.Arrays;
import java.util.List;

import javax.swing.ButtonGroup;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.JProgressBar;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JSeparator;
import javax.swing.JTextField;
import javax.swing.Timer;


public class EssaiDialog extends javax.swing.JFrame
{

    /** Creates new form EssaiDialog
     * @param titre */
    public EssaiDialog(String titre)
    {
        super(titre);
        initComponents();
        this.getContentPane().setLayout( new BorderLayout() );

        Graphe g=new Graphe ();

        this.getContentPane().add( g, BorderLayout.CENTER );

        this.setBounds(198,0,900,700);
        this.setResizable(false);
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.setVisible(true);
        ImageIcon img=new ImageIcon("Ressources\\images\\icon.png");
        this.setIconImage(img.getImage());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents()
    {
        setAlwaysOnTop(false);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter()
        {
            @Override
            public void windowClosing(java.awt.event.WindowEvent evt)
            {
                closeDialog(evt);
            }
        });

        pack();
    }

    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt)
    {
        setVisible(false);
        dispose();
    }

    public static void main(String args[])
    {
        EssaiDialog essaiDialog = new EssaiDialog("Gestionnaire des examens");
    }

}

class Graphe extends JPanel implements ActionListener
{

    static List<String> chreno =Arrays.asList("08:00 - 10:00","10:30 - 12:30","14:30 - 16:30","17:00 - 19:00");

    JRadioButton rad1= new JRadioButton("<html><font color=black>1<sup>er</sup>semestre</font></html>");
    JRadioButton rad2= new JRadioButton("<html><font color=black>2<sup>ème</sup>semestre</font></html>");
    JRadioButton rad3= new JRadioButton("Planning Enseignants");
    JRadioButton rad4= new JRadioButton("Planning Etudiants");
    ButtonGroup gro=  new ButtonGroup();
    ButtonGroup gro1=new ButtonGroup();

    JLabel lab0=new JLabel("<html><font color=black size=4><B>Choix du semestre :</B></font></html>");
    JLabel lab1=new JLabel("<html><font color=black size=4><B>Choix de la date du début des examens :</B></font></html>");
    JLabel lab2=new JLabel("<html><font color=black size=4><B>Jour :</B></font></html>");
    JLabel lab3=new JLabel("<html><font color=black size=4><B>Mois :</B></font></html>");
    JLabel lab4=new JLabel("<html><font color=black size=4><B>Année :</B></font></html>");


    JLabel lab5=new JLabel("<html><font color=black size=4><B>Nombre total des étudiants : </B></font></html>");
    JLabel lab6=new JLabel("<html><font color=black size=4><B>Affichage du planning : </B></font></html>");
    JLabel lab7=new JLabel("<html><font color=black size=4><B>Affichage des listes des étudiants : </B></font></html>");
    JLabel lab8=new JLabel("<html><font color=black size=4><B>Choix du jour : </B></font></html>");
    JLabel lab9=new JLabel("<html><font color=black size=4><B>Choix du créneau : </B></font></html>");
    JLabel lab10=new JLabel("<html><font color=black size=4><B>Choix du local : </B></font></html>");
    JLabel lab11=new JLabel(Integer.toString(Planning.totalE()));
    JLabel lab12=new JLabel("");
    JLabel lab13=new JLabel("");


    JButton but0=new JButton("");
    JButton but1=new JButton("Select");
    JButton but2=new JButton("");


    JTextField f0=new JTextField("01");
    JTextField f1=new JTextField("01");
    JTextField f2=new JTextField("2019");
    JTextField f3=new JTextField();
    JTextField f4=new JTextField();
    JTextField f5=new JTextField();
    JSeparator sep0=new JSeparator();
    JSeparator sep1=new JSeparator();
    JSeparator sep2=new JSeparator();
    JList l0;
    JScrollPane p0;
    JList l1;
    JScrollPane p1;
    JList l2;
    JScrollPane p2;
    JProgressBar p;
    Timer t;
    int i=0;

    String url1="\\planning";
    private final Image bg  =getToolkit().getImage(url1+"\\img1.png");
    ImageIcon img0=new ImageIcon(url1+"\\planning.png");
    ImageIcon img2=new ImageIcon(url1+"\\etudiant.png");

    int width = (int) Toolkit.getDefaultToolkit().getScreenSize().width;
    int height = (int) Toolkit.getDefaultToolkit().getScreenSize().height;

    public Graphe()
    {
        Planning.AjouterLesModules();

        for(Module m :Planning.liste_module)
        {
            m.Ajouter_etudiant();
            m.responsable=null;
            m.affecterResponsable();

        }
        Planning.eleminerModuleZeroEtudiant();

        Planning.matrice(Planning.liste_module);

        Planning.calcule_deg(Planning.incompatibiltyMatrice);
        Planning.triBulleDecroissant(Planning.liste_module);
        Planning.matrice(Planning.liste_module);
        Planning.coloration();
        Planning.creer_chreno();
        Planning.affecterLocal();
        Planning.affecterRepresentant();
        Planning.affecterSurveillants();
        Planning.chrenoDuJour();
        Planning.affecterDonner();


        l0=new JList(Planning.jour.toArray());
        l2=new JList(Planning.locaux.toArray());
        l1=new JList(chreno.toArray());
        p0=new JScrollPane(l0);
        p1=new JScrollPane(l1);
        p2=new JScrollPane(l2);


        p=new JProgressBar(0,100);
        p.setBackground(Color.WHITE);
        p.setBorderPainted(true);
        p.setStringPainted(true);
        p.setForeground(Color.GREEN);
        p.setString("0%");

        t = new Timer(20,this);

        add(p);

        add(lab11);
        add(lab0);
        add(lab1);
        add(lab5);
        add(lab2);
        add(lab3);
        add(lab4);
        add(f0);
        add(f1);
        add(f2);
        add(rad1);
        add(rad2);
        add(sep0);
        add(lab12);
        add(lab13);

        add(lab6);
        add(rad3);
        add(rad4);
        add(but0);
        add(sep1);

        add(lab7);
        add(lab8);
        add(lab9);
        add(lab10);
        add(p0);
        add(p1);
        add(p2);
        add(f3);
        add(but1);
        add(but2);
        add(sep2);
        add(p);
        but0.addActionListener(this);
        but1.addActionListener(this);
        but2.addActionListener(this);


        but0.setText("Afficher planning");


        but2.setText("Afficher liste");


        setLayout(null);
        gro.add(rad1);
        gro.add(rad2);
        gro1.add(rad3);
        gro1.add(rad4);

        lab0.setBounds(10, 10,200,15);
        lab1.setBounds(240, 10,400,15);
        lab5.setBounds(590,10,210,15);
        lab11.setBounds(800,10,100,15);
        lab2.setBounds(210,40+20-10,40,20);
        f0.setBounds(300-40,40+20-10,40,20);
        lab3.setBounds(390-40,40+20-10,50,20);
        f1.setBounds(460-40-20,40+20-10,40,20);
        lab4.setBounds(550-40-20,40+20-10,60,20);
        f2.setBounds(610-40-20,40+20-10,40,20);
        sep0.setBounds(0,90, 900, 15);
        sep0.setForeground(Color.DARK_GRAY);
        rad1.setBounds(10,35,120,15);
        rad2.setBounds(10,60,120,15);

        lab6.setBounds(10,110, 300, 20);
        rad3.setBounds(250,140, 200, 20);
        rad4.setBounds(250,180, 200, 20);
        lab13.setBounds(250,220, 350, 30);
        but0.setBounds(900-280-40,140-45+8+50+5, 200, 30);
        sep1.setBounds(0,260,900, 15);
        sep1.setForeground(Color.DARK_GRAY);

        lab7.setBounds(10,270, 300, 20);
        lab8.setBounds(150,300, 150, 15);
        lab9.setBounds(400,300, 150, 15);
        lab10.setBounds(650,300, 150, 15);
        p0.setBounds(150,350, 150, 60+50+10);
        p1.setBounds(400,350, 150, 60+50+10);

        p2.setBounds(650,350, 150, 60+50+10);
        lab12.setBounds(650,460+10, 200, 100);

        f3.setBounds(650,325, 75, 25);
        but1.setBounds(650+75,325, 75, 25);

        but2.setBounds(360,410+60+10+15, 220, 35);
        sep2.setBounds(0,570, 900, 50);
        sep2.setForeground(Color.black);
        p.setBounds(300,600,300,25);

        setOpaque( false );
    }

    @Override
    public void paint(Graphics g)
    {
        g.drawImage( bg, 0, 0, width, height, this );
        super.paint( g );
    }


    @Override
    public void actionPerformed(ActionEvent e)
    {
        t.start();
        i++;
        p.setValue(i);
        p.setString(Integer.toString(i)+"%");
        if(i==100)
        {
            t.stop();
            i=0;
        }

        if (e.getSource()==but0)
        {
            String jour	=f0.getText();
            String Mois=f1.getText();
            String annee = f2.getText();
            if(!jour.equals("")&& !Mois.equals("") && !annee.equals(""))
            {
                int day=Integer.parseInt(jour);
                int mounth=Integer.parseInt(Mois);
                int year=Integer.parseInt(annee);

                if((day>=1) && (day<32)&&(1<=mounth) && (mounth<=12 )&&( year>=2018) && (year<=2100) )
                {

                    if((mounth==1)||( mounth==3)||(mounth==5)||(mounth==7)||(mounth==8)||(mounth==10)||(mounth==12))
                    {

                        test( rad1,rad2, rad3, rad4,day, mounth, year, lab13, i);
                    }

                    else if( (mounth==2) )
                    {

                        if(day<=29)
                        {
                            test( rad1,rad2, rad3, rad4,day, mounth, year, lab13, i);

                        }
                        else
                            lab13.setText("<html><font color=red size=5><B>Date invalide!</B></font></html>");
                    }
                    else
                    {

                        if(day<=30)
                        {
                            test( rad1,rad2, rad3, rad4,day, mounth, year, lab13, i);

                        }
                        else
                            lab13.setText("<html><font color=red size=5><B>Date invalide!</B></font></html>");

                    }

                }

                else
                    lab13.setText("<html><font color=red size=5><B>Date invalide!</B></font></html>");

            }
            else
                lab13.setText("<html><font color=red size=5><B>Date invalide!</B></font></html>");

        }
        if (e.getSource()==but1)
        {

            String s=f3.getText();
            if(Planning.locaux.contains(s))
            {
                l2.setSelectedIndex(Planning.locaux.indexOf(s));
                lab12.setText(s +"  selectionné");
            }
            else
            {

                lab12.setText("<html><font color=red size=5><B>Attention! veuillez entrer un local valide.</B></font></html>");
            }
        }
        if (e.getSource()==but2)
        {
            try
            {
                int z=l0.getSelectedIndex();
                int h=l1.getSelectedIndex();
                int k=l2.getSelectedIndex();

                Planning.afficherLiseEtudiant(z, h,k);
                lab12.setText("");
            }
            catch(Exception ex)
            {
                lab12.setText("<html><font color=red size=5><B>Vérifiez si  vous avez Selectionné un jour,un créneau et un local.</B></font></html>");
            }
        }
    }
    public static void test(JRadioButton rad1,JRadioButton rad2,JRadioButton rad3,JRadioButton rad4,int day,int mounth,int year,JLabel lab13,int i)
    {
        if(rad3.isSelected())
        {
            if(rad1.isSelected())
            {
                try
                {
                    Planning.planningAdministation("1",new date(day,mounth,year));
                    i=0;
                }
                catch (ParseException e1)
                {
                    // TODO Auto-generated catch block

                }
                lab13.setText("<html><font color=green size=5><B>Affichage effectué avec succées</B></font></html>");
            }
            else if(rad2.isSelected())
            {
                try
                {
                    Planning.planningAdministation("2",new date(day,mounth,year));
                    i=0;
                }
                catch (ParseException e1)
                {
                    // TODO Auto-generated catch block

                }
                lab13.setText("<html><font color=green size=5><B>Affichage effectué avec succées</B></font></html>");
            }
        }
        else if(rad4.isSelected())
        {
            if(rad1.isSelected())
            {
                try
                {
                    Planning.planningEtudiant("1",new date(day,mounth,year));
                    i=0;
                }
                catch (ParseException e1)
                {
                }
                lab13.setText("<html><font color=green size=5><B>Affichage effectué avec succées</B></font></html>");
            }

            else if(rad2.isSelected())
            {
                try
                {
                    Planning.planningEtudiant("2",new date(day,mounth,year));
                    i=0;
                }
                catch (ParseException e1)
                {
                }
                lab13.setText("<html><font color=green size=5><B>Affichage effectué avec succées</B></font></html>");
            }

        }
    }
}
